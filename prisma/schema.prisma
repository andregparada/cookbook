generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id           String    @id @default(uuid())
  firstName    String    @db.VarChar(50)
  lastName     String    @db.VarChar(50)
  userName     String    @unique @db.VarChar(50)
  email        String    @unique @db.VarChar(100)
  passwordHash String    @db.VarChar(255)
  role         Role      @default(MEMBER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  isActive     Boolean   @default(true)

  recipes Recipe[]

  @@index([email])
  @@index([userName])
  @@map("users")
}

model Recipe {
  id           String            @id @default(uuid())
  title        String            @db.VarChar(100)
  description  String            @db.VarChar(500)
  instructions String            @db.Text
  prepTime     Int?
  cookTime     Int?
  difficulty   RecipeDifficulty?
  cost         Decimal?
  servings     Int?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  ingredients IngredientOnRecipe[]
  tags        Tag[]

  @@index([title])
  @@index([userId])
  @@map("recipes")
}

model Ingredient {
  id      String               @id @default(uuid())
  name    String               @unique @db.VarChar(100)
  cost    Decimal?
  recipes IngredientOnRecipe[]

  @@index([name])
  @@map("ingredients")
}

model Tag {
  id    String @id @default(uuid())
  title String @unique

  recipes Recipe[]

  @@index([title])
  @@map("tags")
}

model IngredientOnRecipe {
  id       String @id @default(uuid())
  quantity Float
  unit     String

  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@map("ingredientsOnRecipes")
}
